{"version":3,"file":"static/js/432.e78d6297.chunk.js","mappings":"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","sources":["api/sheet.ts","component/Header/Header.tsx","component/LoadingDim/LoadingDim.tsx","hook/useSnackBar.tsx","component/Button/RefreshButton.tsx","constant/constant.ts","util/util.ts","component/SheetTable/SheetTable.tsx","page/SheetPage.tsx"],"sourcesContent":["import Axios from 'axios'\nimport { SheetDataInterface } from '../page/SheetPage'\n\nconst axiosInstance = Axios.create({\n  baseURL: process.env.REACT_APP_API_URL + 'accountBook/sheet/',\n  withCredentials: true,\n})\n\nexport const getSheets = async () => {\n  let res = await axiosInstance.get<SheetDataInterface[]>('')\n  return res.data\n}\n\nexport const getSheet = async (sheetId: number) => {\n  let res = await axiosInstance.get<SheetDataInterface>(`${sheetId}`)\n  return res.data\n}\n\nexport const postSheets = async () => {\n  let res = await axiosInstance.post<SheetDataInterface[]>('')\n  return res.data\n}\n\nexport const patchSheet = async (\n  sheetId: number,\n  sheetData: SheetDataInterface,\n) => {\n  let res = await axiosInstance.patch<SheetDataInterface>(\n    `${sheetId}`,\n    sheetData,\n  )\n  return res.data\n}\n\n// sheet 순서 변경\nexport const patchOrder = async (orderData: sheetOrderInterface) => {\n  let res = await axiosInstance.patch(\n    `${orderData.fromId}/${orderData.toId}`,\n    orderData,\n  )\n  return res.data\n}\n\nexport interface sheetOrderInterface {\n  fromId: number\n  toId: number\n}\n","import styled from '@emotion/styled'\nimport { useNavigate } from 'react-router-dom'\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew'\nimport { Colors } from '../../util/Colors'\nimport { ReactNode } from 'react'\n\nexport default function Header({\n  title,\n  backButton,\n  backFunction,\n}: {\n  title?: ReactNode\n  backButton?: boolean\n  backFunction?: () => void\n}) {\n  const navigate = useNavigate()\n  return (\n    <HeaderWrapper>\n      {backButton && (\n        <BackIcon\n          fontSize='inherit'\n          onClick={() => (backFunction ? backFunction() : navigate(-1))}\n        />\n      )}\n      {title && title !== 'undefined' && <TitleSpan>{title}</TitleSpan>}\n    </HeaderWrapper>\n  )\n}\n\nconst HeaderWrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100%;\n  height: 38.5px;\n  max-width: 500px;\n\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n  padding: 10px 20px 10px;\n  border-bottom: 1px solid ${Colors.greenLine};\n  background: white;\n  @media (min-width: 500px) {\n    border: 1px solid ${Colors.greenLine};\n    border-top: 0;\n  }\n`\n\nconst BackIcon = styled(ArrowBackIosNewIcon)`\n  &::active {\n    background: #eee;\n  }\n`\n\nconst TitleSpan = styled.span`\n  font-weight: 700;\n`\n","import styled from '@emotion/styled'\nimport HourglassEmptyIcon from '@mui/icons-material/HourglassEmpty'\n\nexport default function LoadingDim({ loading }: { loading: boolean }) {\n  return loading ? (\n    <Dim>\n      <HourglassEmptyIcon />\n    </Dim>\n  ) : null\n}\n\nconst Dim = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background: rgba(0, 0, 0, 0.3);\n\n  @keyframes rotation {\n    ${`${(100 / 6) * 0}%`} {\n      transform: rotate(0deg);\n    }\n    ${`${(100 / 6) * 1}%`} {\n      transform: rotate(180deg);\n    }\n    ${`${(100 / 6) * 2}%`} {\n      transform: rotate(180deg);\n    }\n    ${`${(100 / 6) * 3}%`} {\n      transform: rotate(180deg);\n    }\n    ${`${(100 / 6) * 4}%`} {\n      transform: rotate(360deg);\n    }\n    ${`${(100 / 6) * 5}%`} {\n      transform: rotate(360deg);\n    }\n    ${`${(100 / 6) * 6}%`} {\n      transform: rotate(360deg);\n    }\n  }\n  svg {\n    width: 30px;\n    height: 30px;\n    color: white;\n    animation: 1.5s linear rotation infinite;\n  }\n`\n","import styled from '@emotion/styled'\nimport { useCallback, useEffect, useRef, useState } from 'react'\n\nconst animationTime = 500\n\nexport default function useSnackBar({\n  message,\n  duration = 3000,\n}: {\n  message: string\n  duration?: number\n}) {\n  const [animating, setAnimating] = useState(false)\n  const snackBarRef = useRef<any>()\n\n  useEffect(() => {\n    if (animating) {\n      setTimeout(() => {\n        if (snackBarRef.current) snackBarRef.current.classList.remove('open')\n        setAnimating(false)\n      }, duration)\n    }\n  }, [animating, duration])\n\n  const SnackBar = useCallback(\n    () => <Message ref={snackBarRef}>{message}</Message>,\n    [message],\n  )\n\n  const openSnackBar = () => {\n    const time = new Date().getTime() % 100000 // 정수초과로 자리수 낮추기\n    if (snackBarRef.current) snackBarRef.current.style.zIndex = time\n    if (!animating) {\n      if (snackBarRef.current) snackBarRef.current.classList.add('open')\n      setAnimating(true)\n    }\n  }\n\n  return { SnackBar, openSnackBar }\n}\n\nconst Message = styled.div`\n  position: fixed;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%);\n  opacity: 0;\n  background: #777;\n  color: white;\n  padding: 5px 10px;\n  border-radius: 8px;\n  transition: bottom ${animationTime}ms, opacity ${animationTime}ms;\n  &.open {\n    bottom: 20px;\n    opacity: 1;\n  }\n`\n","import styled from '@emotion/styled'\nimport RefreshIcon from '@mui/icons-material/Refresh'\n\nexport default function RefreshButton({\n  onClick,\n  refreshing,\n}: {\n  onClick: () => void\n  refreshing: boolean\n}) {\n  return (\n    <RefreshButtonWrapper onClick={onClick} disabled={refreshing}>\n      <RefreshIcon />\n    </RefreshButtonWrapper>\n  )\n}\n\nconst RefreshButtonWrapper = styled.button<{ disabled: boolean }>`\n  position: fixed;\n  @media (min-width: 500px) {\n    position: absolute;\n  }\n  bottom: 20px;\n  left: 20px;\n\n  padding: 5px;\n  width: 40px;\n  height: 40px;\n\n  overflow: hidden;\n  background: white;\n  border: 2px solid #eee;\n  border-radius: 100%;\n\n  ${({ disabled }) => disabled && `animation: 500ms rotation infinite linear;`}\n  @keyframes rotation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  svg {\n    color: #aaa;\n    width: 100%;\n    height: 100%;\n  }\n`\n","export const animationDuration = 300\n","export const parseToNumber = (num: string | number) => {\n  const number = removeComma(num)\n  if (Number.isNaN(Number(number))) {\n    return 0\n  } else {\n    return Number(number)\n  }\n}\n\nexport const removeComma = (num?: string | number | BigInt) => {\n  return String(num).replace(/,/g, '')\n}\n\nexport const localeNumber = (num: string | number) => {\n  return Number(removeComma(num)).toLocaleString()\n}\n\nexport const isNumber = (num: string | number) => {\n  return !isNaN(Number(removeComma(num)))\n}\n\n// BigInt\nexport const parseToBigInt = (num: string | BigInt) => {\n  const number = removeComma(num)\n  if (isBigInt(number)) {\n    return BigInt(number)\n  } else {\n    return BigInt(0)\n  }\n}\n\nexport const localeBigInt = (num: string | BigInt) => {\n  return BigInt(removeComma(num)).toLocaleString()\n}\n\nexport const isBigInt = (num?: string | BigInt | number) => {\n  try {\n    if (typeof num === 'number') return false\n    BigInt(removeComma(num))\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n// fake input 사용해서 input size 변경\nexport const changeInputWidth = (target: HTMLInputElement) => {\n  if (target) {\n    const fakeInput = document.querySelector<HTMLInputElement>('.fakeInput')\n    if (fakeInput) {\n      fakeInput.value = target.value\n      fakeInput.style.fontSize = getComputedStyle(target).fontSize\n      fakeInput.style.fontWeight = getComputedStyle(target).fontWeight\n      const width = fakeInput.scrollWidth + 10\n      target.style.width = width + 'px'\n      fakeInput.value = ''\n    }\n  }\n}\n","import React, { ChangeEvent } from 'react'\nimport { Colors } from '../../util/Colors'\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'\nimport RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline'\nimport produce from 'immer'\nimport { SheetDataInterface } from '../../page/SheetPage'\nimport styled from '@emotion/styled'\nimport { animationDuration } from '../../constant/constant'\nimport {\n  changeInputWidth,\n  isBigInt,\n  localeBigInt,\n  parseToBigInt,\n} from '../../util/util'\n\ninterface SheetTableInterface {\n  sheetData?: SheetDataInterface\n  setSheetData: React.Dispatch<\n    React.SetStateAction<SheetDataInterface | undefined>\n  >\n  addRow: (row: number) => void\n  removeRow: (row: number) => void\n}\n\nexport default function SheetTable({\n  sheetData,\n  setSheetData,\n  addRow,\n  removeRow,\n}: SheetTableInterface) {\n  let sum = BigInt(0)\n\n  // 이벤트와 인덱스를 받아서 sheetData에 저장\n  const handleInputChange = (\n    e: ChangeEvent<HTMLInputElement>,\n    i: number,\n    j: number,\n  ) => {\n    if (e.target) {\n      // input size 변경\n      changeInputWidth(e.target)\n\n      // sheetData 업데이트\n      const newSheetData = produce((draft) => {\n        if (draft && draft.table && draft.table[i]) {\n          draft.table[i][j] = e.target.value\n          return draft\n        }\n      }, sheetData)\n      setSheetData(newSheetData)\n    }\n  }\n\n  return (\n    <TableWrapper>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>번호</th>\n            <th>유형</th>\n            <th>항목</th>\n            <th>가격</th>\n            <th>합계</th>\n            <th onClick={() => addRow(0)}>\n              <AddIcon fontSize='small' />\n            </th>\n          </tr>\n          {React.Children.toArray(\n            sheetData?.table?.map((row, i) => (\n              <tr id={`row_${i + 1}`}>\n                <td\n                  onClick={() => {\n                    removeRow(i + 1)\n                  }}\n                >\n                  <RemoveIcon fontSize='small' />\n                </td>\n                <td>{i + 1}</td>\n                {React.Children.toArray(\n                  row.map((col, j) => {\n                    // 합계에 가격 더하기\n                    if (j === 2) {\n                      sum += parseToBigInt(col)\n                    }\n                    return (\n                      <td>\n                        <CommonInput\n                          numCheck={j === 2}\n                          value={\n                            j === 2 && isBigInt(col) && col !== ''\n                              ? localeBigInt(col)\n                              : col.toString()\n                          }\n                          height='28px'\n                          onChange={(e) => handleInputChange(e, i, j)}\n                        />\n                      </td>\n                    )\n                  }),\n                )}\n                <td>{localeBigInt(sum)}</td>\n                <td onClick={() => addRow(i + 1)}>\n                  <AddIcon fontSize='small' />\n                </td>\n              </tr>\n            )),\n          )}\n        </tbody>\n      </table>\n    </TableWrapper>\n  )\n}\n\nconst TableWrapper = styled.div`\n  min-width: 100%;\n  max-width: 200%;\n  overflow: auto;\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    border: 1px solid ${Colors.greenLine};\n  }\n  th {\n    background: ${Colors.greenLine};\n  }\n  th,\n  td {\n    border: 1px solid ${Colors.greenLine};\n    white-space: pre;\n    text-align: left;\n    padding: 2px;\n    min-width: 10px;\n  }\n  .blink {\n    @keyframes blink {\n      0% {\n        background: ${Colors.greenLine};\n      }\n      100% {\n        background: white;\n      }\n    }\n    animation: blink ${animationDuration}ms;\n  }\n  .blinkRed {\n    @keyframes blinkRed {\n      0% {\n        background: red;\n      }\n      100% {\n        background: white;\n      }\n    }\n    animation: blinkRed ${animationDuration}ms;\n  }\n  th:nth-of-type(3),\n  th:nth-of-type(4),\n  th:nth-of-type(5),\n  th:nth-of-type(6) {\n    min-width: 60px;\n  }\n  td:nth-of-type(5) input,\n  td:nth-of-type(6) {\n    text-align: right;\n  }\n  td:nth-of-type(3),\n  td:nth-of-type(4),\n  td:nth-of-type(5) {\n    padding: 0;\n  }\n`\nconst AddIcon = styled(AddCircleOutlineIcon)`\n  color: #7c7;\n`\nconst RemoveIcon = styled(RemoveCircleOutlineIcon)`\n  color: red;\n`\nexport const CommonInput = styled.input<{\n  height?: string\n  value?: string | number | BigInt\n  numCheck?: boolean\n}>`\n  width: 100%;\n  min-width: 100%;\n  height: ${({ height }) => (height ? `${height}` : '100%')};\n  border: 0;\n  outline: none;\n  background: none;\n  font: inherit;\n  &:focus,\n  &:hover,\n  &:active {\n    background: ${Colors.greenLine};\n  }\n  ${({ numCheck, value }) => {\n    return numCheck && !isBigInt(value) ? 'background: #fcc;' : ''\n  }}\n`\n","import styled from '@emotion/styled'\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport Header from '../component/Header/Header'\nimport produce from 'immer'\n\nimport { getSheet, patchSheet } from '../api/sheet'\nimport RefreshButton from '../component/Button/RefreshButton'\nimport SaveIcon from '@mui/icons-material/Save'\nimport useSnackBar from '../hook/useSnackBar'\nimport SheetTable from '../component/SheetTable/SheetTable'\nimport { animationDuration } from '../constant/constant'\nimport { Colors } from '../util/Colors'\nimport { changeInputWidth } from '../util/util'\nimport LoadingDim from '../component/LoadingDim/LoadingDim'\n\nexport interface SheetDataInterface {\n  sheetId: number\n  name: string\n  order: number\n  table?: (string | BigInt)[][]\n}\n\n// 첫 데이터가 펫치됐을때 한번만 setInputWidth() 실행하기 위함\nlet beforeSetWidth = true\n\nexport default function SheetPage() {\n  const params = useParams()\n  const navigate = useNavigate()\n  const [sheetData, setSheetData] = useState<SheetDataInterface>()\n  const [loading, setLoading] = useState(false)\n  const [addedRow, setAddedRow] = useState<number>()\n  const [removedRow, setRemovedRow] = useState<number>()\n  const { SnackBar: SnackBarSave, openSnackBar: openSnackBarSave } =\n    useSnackBar({\n      message: '저장 완료',\n      duration: 1500,\n    })\n  const { SnackBar: SnackBarRefresh, openSnackBar: openSnackBarRefresh } =\n    useSnackBar({\n      message: '새로고침 완료',\n      duration: 1500,\n    })\n\n  const getSheetAndSet = useCallback(() => {\n    if (params.sheetId) {\n      setLoading(true)\n      getSheet(Number(params.sheetId)).then((res) => {\n        setLoading(false)\n        if (res) setSheetData(res)\n      })\n    }\n  }, [params.sheetId])\n\n  const handleChangeHeader = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      // sheetData 업데이트\n      if (sheetData) {\n        const newSheetData = produce((draft) => {\n          if (draft) {\n            // size 변경\n            changeInputWidth(e.target)\n\n            draft.name = e.target.value\n            return draft\n          }\n        }, sheetData)\n        setSheetData(newSheetData)\n      }\n    },\n    [sheetData],\n  )\n  // 처음 한번만 전체 input width 설정하기\n  const changeInputWidthAll = useCallback(() => {\n    const inputs = document.querySelectorAll<HTMLInputElement>(\n      'input:not(.fakeInput)',\n    )\n    if (inputs) {\n      inputs.forEach((input) => {\n        changeInputWidth(input)\n      })\n      beforeSetWidth = false\n    }\n  }, [])\n\n  useEffect(() => {\n    getSheetAndSet()\n  }, [getSheetAndSet])\n\n  // sheetData 바뀌고 beforeSetWidth가 true이면 input width 바꿔주기\n  useEffect(() => {\n    if (beforeSetWidth && sheetData) {\n      changeInputWidthAll()\n    }\n  }, [changeInputWidthAll, sheetData])\n\n  // addRow 액션\n  useEffect(() => {\n    if (addedRow !== undefined) {\n      const tr = document.querySelector(`#row_${addedRow + 1}`)\n      if (tr) {\n        tr.classList.add('blink')\n        setAddedRow(undefined)\n        setTimeout(() => {\n          tr.classList.remove('blink')\n        }, animationDuration)\n      }\n    }\n  }, [addedRow])\n\n  // removeRow 액션\n  useEffect(() => {\n    if (sheetData && removedRow !== undefined) {\n      const tr = document.querySelector(`#row_${removedRow}`)\n      if (tr) {\n        tr.classList.add('blinkRed')\n        setTimeout(() => {\n          tr.classList.remove('blinkRed')\n          const nextState = produce(sheetData, (draft) => {\n            draft?.table?.splice(removedRow - 1, 1)\n          })\n          setSheetData(nextState)\n          setRemovedRow(undefined)\n        }, animationDuration)\n      }\n    }\n  }, [removedRow, sheetData])\n\n  const addRow = useCallback(\n    (row: number) => {\n      const nextState = produce(sheetData, (draft) => {\n        draft?.table?.splice(row, 0, ['', '', ''])\n      })\n      setSheetData(nextState)\n      setAddedRow(row)\n    },\n    [sheetData],\n  )\n\n  const removeRow = useCallback((row: number) => {\n    setRemovedRow(row)\n  }, [])\n\n  return (\n    <>\n      <Header\n        title={\n          sheetData?.name ? (\n            <HeaderInput\n              value={sheetData?.name}\n              onChange={handleChangeHeader}\n            />\n          ) : null\n        }\n        backButton\n        backFunction={() => navigate('/')}\n      />\n      <SheetTable\n        sheetData={sheetData}\n        setSheetData={setSheetData}\n        addRow={addRow}\n        removeRow={removeRow}\n      />\n      <RefreshButton\n        refreshing={loading}\n        onClick={() => {\n          getSheetAndSet()\n          openSnackBarRefresh()\n          beforeSetWidth = true\n        }}\n      />\n      <SaveButton\n        disabled={loading}\n        onClick={() => {\n          if (params.sheetId && sheetData) {\n            setLoading(true)\n            patchSheet(Number(params.sheetId), sheetData).then((res) => {\n              setLoading(false)\n              openSnackBarSave()\n            })\n          }\n        }}\n      >\n        <SaveIcon />\n      </SaveButton>\n      <SnackBarRefresh />\n      <SnackBarSave />\n      <LoadingDim loading={loading} />\n    </>\n  )\n}\n\nconst HeaderInput = styled.input`\n  width: 100%;\n  min-width: 100%;\n  height: 24px;\n  border: 0;\n  outline: none;\n  background: none;\n  font: inherit;\n  &:focus,\n  &:hover,\n  &:active {\n    border-bottom: 1px solid ${Colors.greenLine};\n  }\n`\nconst SaveButton = styled.button<{ disabled: boolean }>`\n  position: fixed;\n  @media (min-width: 500px) {\n    position: absolute;\n  }\n  z-index: 1;\n  top: 2px;\n  right: 20px;\n\n  padding: 5px;\n  width: 40px;\n  height: 40px;\n\n  overflow: hidden;\n  background: blue;\n  border: 2px solid #eee;\n  border-radius: 100%;\n  opacity: 0.7;\n  svg {\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  ${({ disabled }) => disabled && `background: #555;`}\n`\n"],"names":["axiosInstance","Axios","baseURL","process","withCredentials","getSheets","get","res","data","getSheet","sheetId","postSheets","post","patchSheet","sheetData","patch","patchOrder","orderData","fromId","toId","Header","title","backButton","backFunction","navigate","useNavigate","HeaderWrapper","BackIcon","fontSize","onClick","TitleSpan","styled","Colors","ArrowBackIosNewIcon","LoadingDim","loading","Dim","useSnackBar","message","duration","useState","animating","setAnimating","snackBarRef","useRef","useEffect","setTimeout","current","classList","remove","SnackBar","useCallback","Message","ref","openSnackBar","time","Date","getTime","style","zIndex","add","RefreshButton","refreshing","RefreshButtonWrapper","disabled","Refresh","animationDuration","removeComma","num","String","replace","localeBigInt","BigInt","toLocaleString","isBigInt","e","changeInputWidth","target","fakeInput","document","querySelector","value","getComputedStyle","fontWeight","width","scrollWidth","SheetTable","setSheetData","addRow","removeRow","sum","TableWrapper","AddIcon","React","table","map","row","i","id","RemoveIcon","col","j","number","parseToBigInt","CommonInput","numCheck","toString","height","onChange","newSheetData","produce","draft","handleInputChange","AddCircleOutlineIcon","RemoveCircleOutlineIcon","beforeSetWidth","SheetPage","params","useParams","setLoading","addedRow","setAddedRow","removedRow","setRemovedRow","SnackBarSave","openSnackBarSave","SnackBarRefresh","openSnackBarRefresh","getSheetAndSet","Number","then","handleChangeHeader","name","changeInputWidthAll","inputs","querySelectorAll","forEach","input","undefined","tr","nextState","splice","HeaderInput","SaveButton","Save"],"sourceRoot":""}