{"version":3,"file":"static/js/84.1893b67e.chunk.js","mappings":"8SAsBe,SAASA,IACtB,ICjBAC,EDiBMC,GAAWC,EAAAA,EAAAA,MACHC,GClBdH,EDkB2C,CAAEI,UAAW,MChBjDC,EAAAA,EAAAA,UACL,CAACC,EAAAA,EAAAA,UACDC,EAAAA,GACAP,IDaMQ,KACR,GAA8BC,EAAAA,EAAAA,UAAsB,IAAIC,KAAxD,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCH,EAAAA,EAAAA,YAAlC,eAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAAiB,SAACC,GACtB,IAAMC,GAASC,EAAAA,EAAAA,KAAQ,SAACC,GAGtB,OAFIH,EAAEI,OAAOT,QAAc,OAALQ,QAAK,IAALA,GAAAA,EAAOE,IAAIC,OAAON,EAAEI,OAAOG,QACvC,OAALJ,QAAK,IAALA,GAAAA,EAAOK,OAAOF,OAAON,EAAEI,OAAOG,QAC5BJ,CACR,GAAER,GACHC,EAAWK,EACZ,EAsBD,OApBAQ,EAAAA,EAAAA,YAAU,WACR,GAAItB,EAAQ,CACV,IAAMuB,EAAqC,GAC/BC,MAAMC,KAAKjB,GAASkB,OAC5BC,SAAQ,SAACC,GACXL,EAAaM,KAAb,OAAkB7B,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAQ8B,QAAO,SAACC,GAAD,OAAWA,EAAMC,UAAYJ,CAA7B,IAAmC,GACrE,IAED,IAAIK,EAA0B,GAC9BV,EAAaI,SAAQ,SAACC,GAChBA,EAAKM,QACPD,EAAcA,EACXE,OAAOP,EAAKM,OACZC,OAAO,CAAC,CAAC,GAAI,GAAI,iCAAmB,MAE1C,IACDxB,EAAa,CAAEuB,MAAOD,EAAaD,QAAS,EAAGI,KAAM,SAAUC,MAAO,GACvE,CACF,GAAE,CAAC7B,EAASR,KAGX,UAACsC,EAAD,YACE,SAACC,EAAA,EAAD,CACEC,MAAO,2BACPC,YAAU,EACVC,aAAc,kBAAM5C,EAAS,IAAK,CAAE6C,SAAS,GAA/B,IAEfC,EAAAA,SAAAA,QACC5C,IAAM,OACJA,QADI,IACJA,OADI,EACJA,EAAQ6C,KAAI,SAACjB,GAAD,OACV,0BACE,UAACkB,EAAD,YACE,kBACEC,KAAK,WACLX,KAAK,QACLhB,MAAOQ,EAAKI,QACZgB,SAAUpC,KAEZ,0BAAOgB,EAAKQ,WATN,OAchB,SAACa,EAAA,EAAD,CAAcvC,UAAWA,EAAWC,aAAcA,KAClD,SAACuC,EAAA,EAAD,CACExC,UAAWA,EACXC,aAAcA,EACdwC,UAAU,MAIjB,EApEDC,EAAAA,EAAAA,MAqEA,IAAMd,EAAiBe,EAAAA,EAAAA,IAAH,8BAChBC,EAAAA,GAEER,EAAaO,EAAAA,EAAAA,MAAH,iE","sources":["page/JoinPage.tsx","api/reactQuery.ts/useGetSheetQuery.ts"],"sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Header from '../component/Header/Header'\r\n\r\nimport SheetTable from '../component/SheetPage/SheetTable'\r\nimport SheetSummary from '../component/SheetPage/SheetSummary'\r\nimport produce, { enableMapSet } from 'immer'\r\nimport { useGetSheetsQuery } from '../api/reactQuery.ts/useGetSheetQuery'\r\nimport styled from '@emotion/styled'\r\nimport { MOBILE_PADDING } from '../App'\r\n\r\nexport interface SheetDataInterface {\r\n  sheetId: number\r\n  name: string\r\n  order: number\r\n  table?: string[][]\r\n  types?: string[]\r\n}\r\n\r\n// 첫 데이터가 펫치됐을때 한번만 setInputWidth() 실행하기 위함\r\nenableMapSet()\r\n\r\nexport default function JoinPage() {\r\n  const navigate = useNavigate()\r\n  const { data: sheets } = useGetSheetsQuery({ staleTime: 10 * 1000 })\r\n  const [checked, setChecked] = useState<Set<number>>(new Set())\r\n  const [sheetData, setSheetData] = useState<SheetDataInterface>()\r\n\r\n  const changeCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const result = produce((draft) => {\r\n      if (e.target.checked) draft?.add(Number(e.target.value))\r\n      else draft?.delete(Number(e.target.value))\r\n      return draft\r\n    }, checked)\r\n    setChecked(result)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (sheets) {\r\n      const joinedSheets: SheetDataInterface[] = []\r\n      const arr = Array.from(checked).sort()\r\n      arr.forEach((item) => {\r\n        joinedSheets.push(sheets?.filter((sheet) => sheet.sheetId === item)[0])\r\n      })\r\n\r\n      let joinedTable: string[][] = []\r\n      joinedSheets.forEach((item) => {\r\n        if (item.table) {\r\n          joinedTable = joinedTable\r\n            .concat(item.table)\r\n            .concat([['', '', '----- 구분선 -----', '']])\r\n        }\r\n      })\r\n      setSheetData({ table: joinedTable, sheetId: 1, name: 'joined', order: 1 })\r\n    }\r\n  }, [checked, sheets])\r\n\r\n  return (\r\n    <StyledJoinPage>\r\n      <Header\r\n        title={'요약보기'}\r\n        backButton\r\n        backFunction={() => navigate('/', { replace: true })}\r\n      />\r\n      {React.Children.toArray(\r\n        sheets &&\r\n          sheets?.map((item) => (\r\n            <div>\r\n              <CheckLabel>\r\n                <input\r\n                  type='checkbox'\r\n                  name='sheet'\r\n                  value={item.sheetId}\r\n                  onChange={changeCheckbox}\r\n                />\r\n                <span>{item.name}</span>\r\n              </CheckLabel>\r\n            </div>\r\n          )),\r\n      )}\r\n      <SheetSummary sheetData={sheetData} setSheetData={setSheetData} />\r\n      <SheetTable\r\n        sheetData={sheetData}\r\n        setSheetData={setSheetData}\r\n        readOnly={true}\r\n      />\r\n    </StyledJoinPage>\r\n  )\r\n}\r\nconst StyledJoinPage = styled.div`\r\n  ${MOBILE_PADDING}\r\n`\r\nconst CheckLabel = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n","import { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query'\r\nimport { getSheets } from '../sheet'\r\nimport { SheetDataInterface } from '../../page/JoinPage'\r\nimport { queryKeys } from '../queryKeys'\r\n\r\nexport const useGetSheetsQuery = (\r\n  options?: UseQueryOptions<SheetDataInterface[]>,\r\n) => {\r\n  return useQuery<SheetDataInterface[]>(\r\n    [queryKeys.getSheet] as QueryKey,\r\n    getSheets,\r\n    options,\r\n  )\r\n}\r\n"],"names":["JoinPage","options","navigate","useNavigate","sheets","staleTime","useQuery","queryKeys","getSheets","data","useState","Set","checked","setChecked","sheetData","setSheetData","changeCheckbox","e","result","produce","draft","target","add","Number","value","delete","useEffect","joinedSheets","Array","from","sort","forEach","item","push","filter","sheet","sheetId","joinedTable","table","concat","name","order","StyledJoinPage","Header","title","backButton","backFunction","replace","React","map","CheckLabel","type","onChange","SheetSummary","SheetTable","readOnly","enableMapSet","styled","MOBILE_PADDING"],"sourceRoot":""}