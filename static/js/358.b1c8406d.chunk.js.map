{"version":3,"file":"static/js/358.b1c8406d.chunk.js","mappings":"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","sources":["api/queryKeys.ts","api/sheet.ts","api/type.ts","component/Header/Header.tsx","component/SheetPage/SheetSummary.tsx","api/reactQuery.ts/useGetTypeQuery.ts","component/SheetPage/SheetTable.tsx","constant/constant.ts","util/util.ts","../node_modules/@mui/icons-material/AddCircleOutline.js"],"sourcesContent":["export enum queryKeys {\r\n  getSheet = 'getSheet',\r\n  getType = 'getType',\r\n}\r\n","import Axios from 'axios'\r\nimport { SheetDataInterface } from '../page/SheetPage'\r\nimport { api_url } from './account'\r\n\r\nconst axiosInstance = Axios.create({\r\n  baseURL: api_url + '/accountBook/sheet',\r\n  withCredentials: true,\r\n})\r\n\r\nexport const getSheets = async () => {\r\n  let res = await axiosInstance.get<SheetDataInterface[]>('/')\r\n  return res.data\r\n}\r\n\r\nexport const getSheet = async (sheetId: number) => {\r\n  let res = await axiosInstance.get<SheetDataInterface>(`/${sheetId}`)\r\n  return res.data\r\n}\r\n\r\nexport const postSheets = async () => {\r\n  let res = await axiosInstance.post<SheetDataInterface[]>('/')\r\n  return res.data\r\n}\r\n\r\nexport const patchSheet = async (\r\n  sheetId: number,\r\n  sheetData: SheetDataInterface,\r\n) => {\r\n  let res = await axiosInstance.patch<SheetDataInterface>(\r\n    `/${sheetId}`,\r\n    sheetData,\r\n  )\r\n  return res.data\r\n}\r\n\r\n// sheet 순서 변경\r\nexport const patchOrder = async (orderData: sheetOrderInterface) => {\r\n  let res = await axiosInstance.patch(\r\n    `/${orderData.fromId}/${orderData.toId}`,\r\n    orderData,\r\n  )\r\n  return res.data\r\n}\r\n\r\nexport const deleteSheet = async (sheetId: number) => {\r\n  let res = await axiosInstance.delete(`/${sheetId}`)\r\n  return res.data\r\n}\r\n\r\nexport interface sheetOrderInterface {\r\n  fromId: number\r\n  toId: number\r\n}\r\n","import Axios from 'axios'\r\nimport { api_url } from './account'\r\n\r\nconst axiosInstance = Axios.create({\r\n  baseURL: api_url + '/accountBook/type',\r\n  withCredentials: true,\r\n})\r\n\r\nexport interface TypeInterface {\r\n  type: string\r\n  background?: string\r\n}\r\nexport interface getTypeResponse {\r\n  typeId: number\r\n  types: TypeInterface[]\r\n}\r\n\r\nexport const getType = async () => {\r\n  let res = await axiosInstance.get<getTypeResponse>('/')\r\n  return res.data\r\n}\r\n\r\nexport const patchType = async (types: TypeInterface[]) => {\r\n  let res = await axiosInstance.patch<TypeInterface[]>('/', { types })\r\n  return res.data\r\n}\r\n","import styled from '@emotion/styled'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew'\r\nimport { Colors } from '../../util/Colors'\r\nimport { ReactNode } from 'react'\r\n\r\nexport default function Header({\r\n  title,\r\n  backButton,\r\n  backFunction,\r\n}: {\r\n  title?: ReactNode\r\n  backButton?: boolean\r\n  backFunction?: () => void\r\n}) {\r\n  const navigate = useNavigate()\r\n  return (\r\n    <HeaderWrapper>\r\n      {backButton && (\r\n        <BackIcon\r\n          fontSize='inherit'\r\n          onClick={() => (backFunction ? backFunction() : navigate(-1))}\r\n        />\r\n      )}\r\n      {title && title !== 'undefined' && <TitleSpan>{title}</TitleSpan>}\r\n    </HeaderWrapper>\r\n  )\r\n}\r\n\r\nconst HeaderWrapper = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 100%;\r\n  height: 38.5px;\r\n  max-width: 1000px;\r\n\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  gap: 20px;\r\n  padding: 10px 20px 10px;\r\n  border-bottom: 1px solid ${Colors.greenLine};\r\n  background: white;\r\n  @media (min-width: 1000px) {\r\n    border: 1px solid ${Colors.greenLine};\r\n    border-top: 0;\r\n  }\r\n`\r\n\r\nconst BackIcon = styled(ArrowBackIosNewIcon)`\r\n  &::active {\r\n    background: #eee;\r\n  }\r\n`\r\n\r\nconst TitleSpan = styled.span`\r\n  font-weight: 700;\r\n`\r\n","import styled from '@emotion/styled'\r\nimport React, { useMemo, useRef } from 'react'\r\nimport { useGetTypeQuery } from '../../api/reactQuery.ts/useGetTypeQuery'\r\nimport { SheetDataInterface } from '../../page/SheetPage'\r\nimport { localeBigInt, parseToNumber, setFixed } from '../../util/util'\r\n\r\nexport default function SheetSummary({\r\n  sheetData,\r\n  setSheetData,\r\n}: {\r\n  sheetData?: SheetDataInterface\r\n  setSheetData: React.Dispatch<\r\n    React.SetStateAction<SheetDataInterface | undefined>\r\n  >\r\n}) {\r\n  const income = useRef(0)\r\n  const sum = useRef(0)\r\n  const { data: types } = useGetTypeQuery()\r\n  const summary = useMemo(() => {\r\n    if (types) {\r\n      const summaryObj = types?.types.map(({ type }) => {\r\n        return {\r\n          type: type,\r\n          amount: 0,\r\n        }\r\n      })\r\n      income.current = 0\r\n      sum.current = 0\r\n      sheetData?.table?.forEach((row, i) => {\r\n        // 월급, 수입 저장\r\n        sum.current += parseToNumber(row[3])\r\n        if (row[0]?.includes('월급') || row[0]?.includes('수입')) {\r\n          income.current += parseToNumber(row[3])\r\n        }\r\n        //row[0]가 공백이 아니면 obj에 값 합산해서 저장\r\n        if (row[0]?.trim() !== '') {\r\n          summaryObj.forEach((item) => {\r\n            if (item.type.includes(row[0])) {\r\n              item.amount += parseToNumber(row[3])\r\n            }\r\n          })\r\n        }\r\n      })\r\n      return summaryObj\r\n    }\r\n    return []\r\n  }, [sheetData?.table, types])\r\n\r\n  return (\r\n    <SheetSummaryWrapper>\r\n      {summary.length > 0 ? (\r\n        <>\r\n          <SummaryTitle>요약</SummaryTitle>\r\n          <SummaryDiv>\r\n            {React.Children.toArray(\r\n              summary.map((item, i) => (\r\n                <>\r\n                  {summary[i]?.amount !== 0 && (\r\n                    <SummaryRow>\r\n                      <TypeName>{i !== 0 && `${i}.${item.type}`}</TypeName>\r\n                      <Sum>\r\n                        {`${localeBigInt(summary[i]?.amount)} 원`}\r\n                        <Percent>{`${Math.abs(\r\n                          setFixed(\r\n                            (parseToNumber(summary[i]?.amount) * 100) /\r\n                              (income.current !== 0\r\n                                ? income.current\r\n                                : sum.current),\r\n                            2,\r\n                          ),\r\n                        )}%`}</Percent>\r\n                      </Sum>\r\n                    </SummaryRow>\r\n                  )}\r\n                </>\r\n              )),\r\n            )}\r\n          </SummaryDiv>\r\n        </>\r\n      ) : null}\r\n    </SheetSummaryWrapper>\r\n  )\r\n}\r\n\r\nconst SheetSummaryWrapper = styled.div`\r\n  padding: 20px 0;\r\n`\r\nconst SummaryTitle = styled.div`\r\n  font-weight: bold;\r\n`\r\nconst SummaryDiv = styled.div`\r\n  padding-top: 10px;\r\n  & > div:nth-of-type(2n) {\r\n    background: #cec;\r\n  }\r\n`\r\nconst SummaryRow = styled.div`\r\n  padding: 2px 4px;\r\n  width: 300px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nconst TypeName = styled.div`\r\n  display: flex;\r\n  flex-shrink: 0;\r\n  justify-content: space-between;\r\n  width: 80px;\r\n  padding-right: 10px;\r\n  border-right: 1px solid #222;\r\n`\r\nconst Sum = styled.div`\r\n  display: flex;\r\n  padding-left: 10px;\r\n  text-align: right;\r\n  overflow-wrap: anywhere;\r\n`\r\nconst Percent = styled.div`\r\n  width: 60px;\r\n  margin-left: 4px;\r\n  border-left: 1px solid #222;\r\n`\r\n","import { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query'\r\nimport { queryKeys } from '../queryKeys'\r\nimport { getType, getTypeResponse } from '../type'\r\n\r\nexport const useGetTypeQuery = (options?: UseQueryOptions<getTypeResponse>) => {\r\n  return useQuery<getTypeResponse>(\r\n    [queryKeys.getType] as QueryKey,\r\n    getType,\r\n    options,\r\n  )\r\n}\r\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\r\nimport { Colors } from '../../util/Colors'\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'\r\nimport RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline'\r\nimport produce from 'immer'\r\nimport { SheetDataInterface } from '../../page/SheetPage'\r\nimport styled from '@emotion/styled'\r\nimport { animationDuration } from '../../constant/constant'\r\nimport {\r\n  changeInputWidth,\r\n  isBigInt,\r\n  localeBigInt,\r\n  parseToBigInt,\r\n} from '../../util/util'\r\nimport { getType, TypeInterface } from '../../api/type'\r\nimport OpenColor from 'open-color'\r\n\r\ninterface SheetTableInterface {\r\n  sheetData?: SheetDataInterface\r\n  setSheetData: React.Dispatch<\r\n    React.SetStateAction<SheetDataInterface | undefined>\r\n  >\r\n  addRow?: (row: number) => void\r\n  removeRow?: (row: number) => void\r\n  changeRef?: React.MutableRefObject<boolean>\r\n  readOnly?: boolean\r\n}\r\n\r\nexport default function SheetTable({\r\n  sheetData,\r\n  setSheetData,\r\n  addRow,\r\n  removeRow,\r\n  changeRef,\r\n  readOnly = false,\r\n}: SheetTableInterface) {\r\n  let sum = BigInt(0)\r\n  const [types, setTypes] = useState<TypeInterface[]>([])\r\n  const [beforeSetWidth, setBeforeSetWidth] = useState(true)\r\n\r\n  useEffect(() => {\r\n    getType().then((res) => {\r\n      setTypes(res.types)\r\n    })\r\n  }, [])\r\n\r\n  // 처음 한번만 전체 input width 설정하기\r\n  const changeInputWidthAll = useCallback(() => {\r\n    if (beforeSetWidth) {\r\n      const inputs =\r\n        document.querySelectorAll<HTMLInputElement>('input.autoWidth')\r\n      if (inputs) {\r\n        inputs.forEach((input) => {\r\n          changeInputWidth(input)\r\n        })\r\n      }\r\n      const selects =\r\n        document.querySelectorAll<HTMLSelectElement>('select.autoWidth')\r\n      if (selects) {\r\n        selects.forEach((select) => {\r\n          changeInputWidth(select, true)\r\n        })\r\n      }\r\n      setBeforeSetWidth(false)\r\n    }\r\n  }, [beforeSetWidth])\r\n\r\n  // sheetData, types 있을때 beforeSetWidth가 true이면 input width 바꿔주기\r\n  useEffect(() => {\r\n    if (beforeSetWidth && sheetData && types?.length > 0) {\r\n      changeInputWidthAll()\r\n    }\r\n  }, [beforeSetWidth, changeInputWidthAll, sheetData, types])\r\n\r\n  // 이벤트와 인덱스를 받아서 sheetData에 저장\r\n  const handleInputChange = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n    i: number,\r\n    j: number,\r\n    select = false,\r\n  ) => {\r\n    if (changeRef) changeRef.current = true\r\n    if (e.target) {\r\n      // input size 변경\r\n      changeInputWidth(e.target, select)\r\n\r\n      // sheetData 업데이트\r\n      const newSheetData = produce((draft) => {\r\n        if (draft && draft.table && draft.table[i]) {\r\n          draft.table[i][j] = e.target.value\r\n          return draft\r\n        }\r\n      }, sheetData)\r\n      setSheetData(newSheetData)\r\n    }\r\n  }\r\n\r\n  const setBackground = (value: string) => {\r\n    let back = ''\r\n    types.forEach(({ type, background }) => {\r\n      if (value && type && value.includes(type)) {\r\n        if (background?.startsWith('#')) back = background\r\n        else back = `#${background}`\r\n      }\r\n    })\r\n    return back\r\n  }\r\n\r\n  return (\r\n    <TableWrapper>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            {readOnly ? (\r\n              <th></th>\r\n            ) : (\r\n              <th onClick={() => addRow && addRow(0)}>\r\n                <AddIcon fontSize='small' />\r\n              </th>\r\n            )}\r\n            <th>번호</th>\r\n            <th>유형</th>\r\n            <th>날짜</th>\r\n            <th>제목</th>\r\n            <th>가격</th>\r\n            <th>합계</th>\r\n            <th></th>\r\n          </tr>\r\n          {React.Children.toArray(\r\n            sheetData?.table?.map((row, i) => (\r\n              <tr id={`row_${i + 1}`}>\r\n                {readOnly ? (\r\n                  <td></td>\r\n                ) : (\r\n                  <td\r\n                    onClick={() => {\r\n                      addRow && addRow(i + 1)\r\n                    }}\r\n                  >\r\n                    <AddIcon fontSize='small' />\r\n                  </td>\r\n                )}\r\n                <td>{i + 1}</td>\r\n                {React.Children.toArray(\r\n                  row.map((col, j) => {\r\n                    // 합계에 가격 더하기\r\n                    if (j === 0) {\r\n                      return (\r\n                        <td>\r\n                          {readOnly ? (\r\n                            <Background\r\n                              value={col}\r\n                              background={setBackground(col)}\r\n                              height='20px'\r\n                            >\r\n                              {col}\r\n                            </Background>\r\n                          ) : (\r\n                            <CommonSelect\r\n                              className='autoWidth'\r\n                              value={col}\r\n                              background={setBackground(col)}\r\n                              onChange={(e) => handleInputChange(e, i, j, true)}\r\n                              height='27px'\r\n                            >\r\n                              {React.Children.toArray(\r\n                                types.map(({ type }, k) => (\r\n                                  <option value={type}>\r\n                                    {k === 0 ? '' : `${k}.${type}`}\r\n                                  </option>\r\n                                )),\r\n                              )}\r\n                            </CommonSelect>\r\n                          )}\r\n                        </td>\r\n                      )\r\n                    }\r\n                    if (j === 3) {\r\n                      sum += parseToBigInt(col)\r\n                    }\r\n                    return (\r\n                      <td>\r\n                        {readOnly ? (\r\n                          j === 3 && isBigInt(col) && col !== '' ? (\r\n                            localeBigInt(col)\r\n                          ) : (\r\n                            col.toString()\r\n                          )\r\n                        ) : (\r\n                          <CommonInput\r\n                            className='autoWidth'\r\n                            numCheck={j === 3}\r\n                            value={\r\n                              j === 3 && isBigInt(col) && col !== ''\r\n                                ? localeBigInt(col)\r\n                                : col.toString()\r\n                            }\r\n                            height='28px'\r\n                            onChange={(e) => handleInputChange(e, i, j)}\r\n                          />\r\n                        )}\r\n                      </td>\r\n                    )\r\n                  }),\r\n                )}\r\n                <td>{localeBigInt(sum)}</td>\r\n                {readOnly ? (\r\n                  <td></td>\r\n                ) : (\r\n                  <td onClick={() => removeRow && removeRow(i + 1)}>\r\n                    <RemoveIcon fontSize='small' />\r\n                  </td>\r\n                )}\r\n              </tr>\r\n            )),\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </TableWrapper>\r\n  )\r\n}\r\n\r\nconst TableWrapper = styled.div`\r\n  min-width: 100%;\r\n  max-width: 200%;\r\n  overflow: auto;\r\n\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    border: 1px solid ${Colors.greenLine};\r\n  }\r\n  th {\r\n    background: ${Colors.greenLine};\r\n  }\r\n  th,\r\n  td {\r\n    border: 1px solid ${Colors.greenLine};\r\n    white-space: pre;\r\n    text-align: left;\r\n    padding: 2px;\r\n    min-width: 10px;\r\n  }\r\n  .blink {\r\n    @keyframes blink {\r\n      0% {\r\n        background: ${Colors.greenLine};\r\n      }\r\n      100% {\r\n        background: white;\r\n      }\r\n    }\r\n    animation: blink ${animationDuration}ms;\r\n  }\r\n  .blinkRed {\r\n    @keyframes blinkRed {\r\n      0% {\r\n        background: red;\r\n      }\r\n      100% {\r\n        background: white;\r\n      }\r\n    }\r\n    animation: blinkRed ${animationDuration}ms;\r\n  }\r\n  th:nth-of-type(5),\r\n  th:nth-of-type(6),\r\n  th:nth-of-type(7) {\r\n    min-width: 60px;\r\n  }\r\n  td:nth-of-type(6),\r\n  td:nth-of-type(7),\r\n  td:nth-of-type(6) input,\r\n  td:nth-of-type(7) input {\r\n    text-align: right;\r\n  }\r\n  td:nth-of-type(3),\r\n  td:nth-of-type(4),\r\n  td:nth-of-type(5),\r\n  td:nth-of-type(6) {\r\n    padding: 0;\r\n  }\r\n  td:nth-of-type(4) input {\r\n    max-width: 30px;\r\n  }\r\n`\r\nconst AddIcon = styled(AddCircleOutlineIcon)`\r\n  color: #7c7;\r\n`\r\nconst RemoveIcon = styled(RemoveCircleOutlineIcon)`\r\n  color: red;\r\n`\r\nexport const CommonInput = styled.input<{\r\n  height?: string\r\n  value?: string | number | BigInt\r\n  numCheck?: boolean\r\n}>`\r\n  width: 100%;\r\n  min-width: 100%;\r\n  height: ${({ height }) => (height ? `${height}` : '100%')};\r\n  padding: 0 2px;\r\n  border: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  background: none;\r\n  font: inherit;\r\n  &:focus,\r\n  &:hover,\r\n  &:active {\r\n    background: ${OpenColor.green[0]};\r\n  }\r\n  ${({ numCheck, value }) => {\r\n    return numCheck && !isBigInt(value) ? 'background: #fcc;' : ''\r\n  }}\r\n`\r\n\r\nconst CommonSelect = styled.select<{\r\n  value: string\r\n  height?: string\r\n  background?: string\r\n}>`\r\n  width: 100%;\r\n  min-width: 100%;\r\n  height: ${({ height }) => (height ? `${height}` : '100%')};\r\n  padding: 0 2px;\r\n  border: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  background: transparent;\r\n  color: #222;\r\n  font: inherit;\r\n  background: ${({ background }) => background};\r\n`\r\n\r\nconst Background = styled.div<{\r\n  height?: string\r\n  value: string\r\n  background?: string\r\n}>`\r\n  height: ${({ height }) => (height ? `${height}` : '100%')};\r\n  background: ${({ background }) => background};\r\n`\r\n","export const animationDuration = 300\r\n","export const parseToNumber = (num: string | number | BigInt) => {\r\n  const number = removeComma(num)\r\n  if (Number.isNaN(Number(number))) {\r\n    return 0\r\n  } else {\r\n    return Number(number)\r\n  }\r\n}\r\n\r\nexport const setFixed = (number: string | number | BigInt, decimals = 0) => {\r\n  const num = parseToNumber(number)\r\n  return Math.round(num * 10 ** decimals) / 10 ** decimals\r\n}\r\n\r\nexport const removeComma = (num?: string | number | BigInt) => {\r\n  if (!num) return ''\r\n  return String(num).replace(/,/g, '')\r\n}\r\n\r\nexport const localeNumber = (num: string | number) => {\r\n  return Number(removeComma(num)).toLocaleString()\r\n}\r\n\r\nexport const isNumber = (num: string | number) => {\r\n  return !isNaN(Number(removeComma(num)))\r\n}\r\n\r\n// BigInt\r\nexport const parseToBigInt = (num: string | BigInt) => {\r\n  const number = removeComma(num)\r\n  if (isBigInt(number)) {\r\n    return BigInt(number)\r\n  } else {\r\n    return BigInt(0)\r\n  }\r\n}\r\n\r\nexport const localeBigInt = (num: string | BigInt | number) => {\r\n  return BigInt(removeComma(num)).toLocaleString()\r\n}\r\n\r\nexport const isBigInt = (num?: string | BigInt | number) => {\r\n  try {\r\n    if (typeof num === 'number') return false\r\n    BigInt(removeComma(num))\r\n    return true\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\n// fake input 사용해서 input size 변경\r\nexport const changeInputWidth = (\r\n  target: HTMLInputElement | HTMLSelectElement,\r\n  select = false,\r\n) => {\r\n  if (target) {\r\n    let fakeInput = document.querySelector<HTMLInputElement>('.fakeInput')\r\n    if (select) {\r\n      fakeInput = document.querySelector<HTMLInputElement>('.fakeSelect')\r\n    }\r\n    if (fakeInput) {\r\n      const option = fakeInput.querySelector('option')\r\n      if (option) option.innerHTML = target.value\r\n      fakeInput.value = target.value\r\n      fakeInput.style.fontSize = getComputedStyle(target).fontSize\r\n      fakeInput.style.fontWeight = getComputedStyle(target).fontWeight\r\n      const width = fakeInput.scrollWidth + (select ? 15 : 10)\r\n      target.style.width = width + 'px'\r\n      fakeInput.value = ''\r\n      if (option) option.innerHTML = ''\r\n    }\r\n  }\r\n}\r\n\r\nexport const addSnackBar = (\r\n  message: string,\r\n  duration = 2000,\r\n  animationTime = 500,\r\n) => {\r\n  const snackBar = document.createElement('div')\r\n  const defaultStyle = `\r\n    position: fixed;\r\n    z-index: 999;\r\n    bottom: -40px;\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    opacity: 0;\r\n    background: #777;\r\n    color: white;\r\n    padding: 5px 10px;\r\n    border-radius: 8px;\r\n    font-size: 14px;\r\n    transition: bottom ${animationTime}ms, opacity ${animationTime}ms;\r\n  `\r\n  snackBar.style.cssText = defaultStyle\r\n  snackBar.innerText = message\r\n  document.body.appendChild(snackBar)\r\n  setTimeout(() => {\r\n    snackBar.style.cssText =\r\n      defaultStyle +\r\n      `\r\n    bottom: 20px;\r\n    opacity: 0.9;\r\n    `\r\n  }, 100)\r\n  setTimeout(() => {\r\n    snackBar.style.cssText = defaultStyle\r\n  }, duration)\r\n  setTimeout(() => {\r\n    if (snackBar) snackBar.remove()\r\n  }, duration + animationTime)\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'AddCircleOutline');\n\nexports.default = _default;"],"names":["queryKeys","axiosInstance","Axios","baseURL","api_url","withCredentials","getSheets","get","res","data","getSheet","sheetId","postSheets","post","patchSheet","sheetData","patch","patchOrder","orderData","fromId","toId","deleteSheet","delete","getType","patchType","types","Header","title","backButton","backFunction","navigate","useNavigate","HeaderWrapper","BackIcon","fontSize","onClick","TitleSpan","styled","Colors","ArrowBackIosNewIcon","SheetSummary","options","income","setSheetData","useRef","sum","useQuery","summary","useMemo","summaryObj","map","type","amount","current","table","forEach","row","i","parseToNumber","includes","trim","item","SheetSummaryWrapper","length","SummaryTitle","SummaryDiv","React","SummaryRow","TypeName","Sum","localeBigInt","Percent","Math","abs","setFixed","SheetTable","addRow","removeRow","changeRef","readOnly","BigInt","useState","setTypes","beforeSetWidth","setBeforeSetWidth","useEffect","then","changeInputWidthAll","useCallback","inputs","document","querySelectorAll","input","changeInputWidth","selects","select","handleInputChange","e","j","target","newSheetData","produce","draft","value","setBackground","back","background","startsWith","TableWrapper","AddIcon","id","col","Background","height","CommonSelect","className","onChange","k","parseToBigInt","isBigInt","toString","CommonInput","numCheck","RemoveIcon","animationDuration","AddCircleOutlineIcon","RemoveCircleOutlineIcon","OpenColor","num","number","removeComma","Number","isNaN","decimals","round","String","replace","toLocaleString","fakeInput","querySelector","option","innerHTML","style","getComputedStyle","fontWeight","width","scrollWidth","addSnackBar","message","duration","animationTime","snackBar","createElement","defaultStyle","cssText","innerText","body","appendChild","setTimeout","remove","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}