{"version":3,"file":"static/js/84.c9999574.chunk.js","mappings":"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","sources":["api/queryKeys.ts","api/sheet.ts","component/SheetPage/SheetSummary.tsx","api/reactQuery.ts/useGetTypeQuery.ts","component/SheetPage/SheetTable.tsx","constant/constant.ts","page/JoinPage.tsx","api/reactQuery.ts/useGetSheetQuery.ts","../node_modules/@mui/icons-material/AddCircleOutline.js"],"sourcesContent":["export enum queryKeys {\n  getSheet = 'getSheet',\n  getType = 'getType',\n}\n","import Axios from 'axios'\nimport { SheetDataInterface } from '../page/SheetPage'\n\nconst axiosInstance = Axios.create({\n  baseURL: process.env.REACT_APP_API_URL + 'accountBook/sheet/',\n  withCredentials: true,\n})\n\nexport const getSheets = async () => {\n  let res = await axiosInstance.get<SheetDataInterface[]>('')\n  return res.data\n}\n\nexport const getSheet = async (sheetId: number) => {\n  let res = await axiosInstance.get<SheetDataInterface>(`${sheetId}`)\n  return res.data\n}\n\nexport const postSheets = async () => {\n  let res = await axiosInstance.post<SheetDataInterface[]>('')\n  return res.data\n}\n\nexport const patchSheet = async (\n  sheetId: number,\n  sheetData: SheetDataInterface,\n) => {\n  let res = await axiosInstance.patch<SheetDataInterface>(\n    `${sheetId}`,\n    sheetData,\n  )\n  return res.data\n}\n\n// sheet 순서 변경\nexport const patchOrder = async (orderData: sheetOrderInterface) => {\n  let res = await axiosInstance.patch(\n    `${orderData.fromId}/${orderData.toId}`,\n    orderData,\n  )\n  return res.data\n}\n\nexport const deleteSheet = async (sheetId: number) => {\n  let res = await axiosInstance.delete(`${sheetId}`)\n  return res.data\n}\n\nexport interface sheetOrderInterface {\n  fromId: number\n  toId: number\n}\n","import styled from '@emotion/styled'\nimport React, { useMemo, useRef } from 'react'\nimport { useGetTypeQuery } from '../../api/reactQuery.ts/useGetTypeQuery'\nimport { SheetDataInterface } from '../../page/SheetPage'\nimport { localeBigInt, parseToNumber, setFixed } from '../../util/util'\n\nexport default function SheetSummary({\n  sheetData,\n  setSheetData,\n}: {\n  sheetData?: SheetDataInterface\n  setSheetData: React.Dispatch<\n    React.SetStateAction<SheetDataInterface | undefined>\n  >\n}) {\n  const income = useRef(0)\n  const sum = useRef(0)\n  const { data: types } = useGetTypeQuery()\n  const summary = useMemo(() => {\n    if (types) {\n      const summaryObj = types?.types.map((item) => {\n        return {\n          type: item,\n          amount: 0,\n        }\n      })\n      income.current = 0\n      sum.current = 0\n      sheetData?.table?.forEach((row, i) => {\n        // 월급, 수입 저장\n        sum.current += parseToNumber(row[3])\n        if (row[0]?.includes('월급') || row[0]?.includes('수입')) {\n          income.current += parseToNumber(row[3])\n        }\n        //row[0]가 공백이 아니면 obj에 값 합산해서 저장\n        if (row[0]?.trim() !== '') {\n          summaryObj.forEach((item) => {\n            if (item.type.includes(row[0])) {\n              item.amount += parseToNumber(row[3])\n            }\n          })\n        }\n      })\n      return summaryObj\n    }\n    return []\n  }, [sheetData?.table, types])\n\n  return (\n    <SheetSummaryWrapper>\n      {summary.length > 0 ? (\n        <>\n          <SummaryTitle>요약</SummaryTitle>\n          <SummaryDiv>\n            {React.Children.toArray(\n              summary.map((item, i) => (\n                <>\n                  {summary[i]?.amount !== 0 && (\n                    <SummaryRow>\n                      <TypeName>{i !== 0 && `${i}.${item.type}`}</TypeName>\n                      <Sum>\n                        {`${localeBigInt(summary[i]?.amount)} 원`}\n                        <Percent>{`${Math.abs(\n                          setFixed(\n                            (parseToNumber(summary[i]?.amount) * 100) /\n                              (income.current !== 0\n                                ? income.current\n                                : sum.current),\n                            2,\n                          ),\n                        )}%`}</Percent>\n                      </Sum>\n                    </SummaryRow>\n                  )}\n                </>\n              )),\n            )}\n          </SummaryDiv>\n        </>\n      ) : null}\n    </SheetSummaryWrapper>\n  )\n}\n\nconst SheetSummaryWrapper = styled.div`\n  padding: 20px 0;\n`\nconst SummaryTitle = styled.div`\n  font-weight: bold;\n`\nconst SummaryDiv = styled.div`\n  padding-top: 10px;\n  & > div:nth-of-type(2n) {\n    background: #cec;\n  }\n`\nconst SummaryRow = styled.div`\n  padding: 2px 4px;\n  width: 300px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nconst TypeName = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  justify-content: space-between;\n  width: 80px;\n  padding-right: 10px;\n  border-right: 1px solid #222;\n`\nconst Sum = styled.div`\n  display: flex;\n  padding-left: 10px;\n  text-align: right;\n  overflow-wrap: anywhere;\n`\nconst Percent = styled.div`\n  width: 60px;\n  margin-left: 4px;\n  border-left: 1px solid #222;\n`\n","import { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query'\nimport { queryKeys } from '../queryKeys'\nimport { getType, getTypeResponse } from '../type'\n\nexport const useGetTypeQuery = (options?: UseQueryOptions<getTypeResponse>) => {\n  return useQuery<getTypeResponse>(\n    [queryKeys.getType] as QueryKey,\n    getType,\n    options,\n  )\n}\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\nimport { Colors } from '../../util/Colors'\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'\nimport RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline'\nimport produce from 'immer'\nimport { SheetDataInterface } from '../../page/SheetPage'\nimport styled from '@emotion/styled'\nimport { animationDuration } from '../../constant/constant'\nimport {\n  changeInputWidth,\n  isBigInt,\n  localeBigInt,\n  parseToBigInt,\n} from '../../util/util'\nimport { getType } from '../../api/type'\nimport OpenColor from 'open-color'\n\ninterface SheetTableInterface {\n  sheetData?: SheetDataInterface\n  setSheetData: React.Dispatch<\n    React.SetStateAction<SheetDataInterface | undefined>\n  >\n  addRow?: (row: number) => void\n  removeRow?: (row: number) => void\n  changeRef?: React.MutableRefObject<boolean>\n  readOnly?: boolean\n}\n\nexport default function SheetTable({\n  sheetData,\n  setSheetData,\n  addRow,\n  removeRow,\n  changeRef,\n  readOnly = false,\n}: SheetTableInterface) {\n  let sum = BigInt(0)\n  const [types, setTypes] = useState<string[]>([])\n  const [beforeSetWidth, setBeforeSetWidth] = useState(true)\n\n  useEffect(() => {\n    getType().then((res) => {\n      setTypes(res.types)\n    })\n  }, [])\n\n  // 처음 한번만 전체 input width 설정하기\n  const changeInputWidthAll = useCallback(() => {\n    if (beforeSetWidth) {\n      const inputs = document.querySelectorAll<HTMLInputElement>(\n        'input:not(.fakeInput)',\n      )\n      if (inputs) {\n        inputs.forEach((input) => {\n          changeInputWidth(input)\n        })\n      }\n      const selects = document.querySelectorAll<HTMLSelectElement>(\n        'select:not(.fakeSelect)',\n      )\n      if (selects) {\n        selects.forEach((select) => {\n          changeInputWidth(select, true)\n        })\n      }\n      setBeforeSetWidth(false)\n    }\n  }, [beforeSetWidth])\n\n  // sheetData, types 있을때 beforeSetWidth가 true이면 input width 바꿔주기\n  useEffect(() => {\n    if (beforeSetWidth && sheetData && types?.length > 0) {\n      changeInputWidthAll()\n    }\n  }, [beforeSetWidth, changeInputWidthAll, sheetData, types])\n\n  // 이벤트와 인덱스를 받아서 sheetData에 저장\n  const handleInputChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n    i: number,\n    j: number,\n    select = false,\n  ) => {\n    if (changeRef) changeRef.current = true\n    if (e.target) {\n      // input size 변경\n      changeInputWidth(e.target, select)\n\n      // sheetData 업데이트\n      const newSheetData = produce((draft) => {\n        if (draft && draft.table && draft.table[i]) {\n          draft.table[i][j] = e.target.value\n          return draft\n        }\n      }, sheetData)\n      setSheetData(newSheetData)\n    }\n  }\n\n  return (\n    <TableWrapper>\n      <table>\n        <tbody>\n          <tr>\n            {readOnly ? (\n              <th></th>\n            ) : (\n              <th onClick={() => addRow && addRow(0)}>\n                <AddIcon fontSize='small' />\n              </th>\n            )}\n            <th>번호</th>\n            <th>유형</th>\n            <th>날짜</th>\n            <th>제목</th>\n            <th>가격</th>\n            <th>합계</th>\n            <th></th>\n          </tr>\n          {React.Children.toArray(\n            sheetData?.table?.map((row, i) => (\n              <tr id={`row_${i + 1}`}>\n                {readOnly ? (\n                  <td></td>\n                ) : (\n                  <td\n                    onClick={() => {\n                      addRow && addRow(i + 1)\n                    }}\n                  >\n                    <AddIcon fontSize='small' />\n                  </td>\n                )}\n                <td>{i + 1}</td>\n                {React.Children.toArray(\n                  row.map((col, j) => {\n                    // 합계에 가격 더하기\n                    if (j === 0) {\n                      return (\n                        <td>\n                          {readOnly ? (\n                            <Background value={col} height='20px'>\n                              {col}\n                            </Background>\n                          ) : (\n                            <CommonSelect\n                              value={col}\n                              onChange={(e) => handleInputChange(e, i, j, true)}\n                              height='27px'\n                            >\n                              {React.Children.toArray(\n                                types.map((type, k) => (\n                                  <option value={type}>\n                                    {k === 0 ? '' : `${k}.${type}`}\n                                  </option>\n                                )),\n                              )}\n                            </CommonSelect>\n                          )}\n                        </td>\n                      )\n                    }\n                    if (j === 3) {\n                      sum += parseToBigInt(col)\n                    }\n                    return (\n                      <td>\n                        {readOnly ? (\n                          j === 3 && isBigInt(col) && col !== '' ? (\n                            localeBigInt(col)\n                          ) : (\n                            col.toString()\n                          )\n                        ) : (\n                          <CommonInput\n                            numCheck={j === 3}\n                            value={\n                              j === 3 && isBigInt(col) && col !== ''\n                                ? localeBigInt(col)\n                                : col.toString()\n                            }\n                            height='28px'\n                            onChange={(e) => handleInputChange(e, i, j)}\n                          />\n                        )}\n                      </td>\n                    )\n                  }),\n                )}\n                <td>{localeBigInt(sum)}</td>\n                {readOnly ? (\n                  <td></td>\n                ) : (\n                  <td onClick={() => removeRow && removeRow(i + 1)}>\n                    <RemoveIcon fontSize='small' />\n                  </td>\n                )}\n              </tr>\n            )),\n          )}\n        </tbody>\n      </table>\n    </TableWrapper>\n  )\n}\n\nconst TableWrapper = styled.div`\n  min-width: 100%;\n  max-width: 200%;\n  overflow: auto;\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    border: 1px solid ${Colors.greenLine};\n  }\n  th {\n    background: ${Colors.greenLine};\n  }\n  th,\n  td {\n    border: 1px solid ${Colors.greenLine};\n    white-space: pre;\n    text-align: left;\n    padding: 2px;\n    min-width: 10px;\n  }\n  .blink {\n    @keyframes blink {\n      0% {\n        background: ${Colors.greenLine};\n      }\n      100% {\n        background: white;\n      }\n    }\n    animation: blink ${animationDuration}ms;\n  }\n  .blinkRed {\n    @keyframes blinkRed {\n      0% {\n        background: red;\n      }\n      100% {\n        background: white;\n      }\n    }\n    animation: blinkRed ${animationDuration}ms;\n  }\n  th:nth-of-type(5),\n  th:nth-of-type(6),\n  th:nth-of-type(7) {\n    min-width: 60px;\n  }\n  td:nth-of-type(6),\n  td:nth-of-type(7),\n  td:nth-of-type(6) input,\n  td:nth-of-type(7) input {\n    text-align: right;\n  }\n  td:nth-of-type(3),\n  td:nth-of-type(4),\n  td:nth-of-type(5),\n  td:nth-of-type(6) {\n    padding: 0;\n  }\n`\nconst AddIcon = styled(AddCircleOutlineIcon)`\n  color: #7c7;\n`\nconst RemoveIcon = styled(RemoveCircleOutlineIcon)`\n  color: red;\n`\nexport const CommonInput = styled.input<{\n  height?: string\n  value?: string | number | BigInt\n  numCheck?: boolean\n}>`\n  width: 100%;\n  min-width: 100%;\n  height: ${({ height }) => (height ? `${height}` : '100%')};\n  padding: 0 2px;\n  border: 0;\n  border-radius: 0;\n  outline: none;\n  background: none;\n  font: inherit;\n  &:focus,\n  &:hover,\n  &:active {\n    background: ${OpenColor.green[0]};\n  }\n  ${({ numCheck, value }) => {\n    return numCheck && !isBigInt(value) ? 'background: #fcc;' : ''\n  }}\n`\nconst background = (value: string) => {\n  if (value?.includes('생활비')) {\n    return OpenColor.pink[2]\n  } else if (value?.includes('배달외식')) {\n    return OpenColor.red[2]\n  } else if (value?.includes('기타')) {\n    return OpenColor.yellow[2]\n  } else if (value?.includes('관리비')) {\n    return OpenColor.lime[2]\n  } else if (value?.includes('저금')) {\n    return OpenColor.blue[4]\n  } else if (value?.includes('보험료')) {\n    return OpenColor.blue[2]\n  } else if (value?.includes('여행')) {\n    return OpenColor.indigo[2]\n  } else if (value?.includes('경조사')) {\n    return OpenColor.indigo[4]\n  } else if (value?.includes('병원')) {\n    return OpenColor.violet[2]\n  } else if (value?.includes('비상금')) {\n    return OpenColor.violet[4]\n  } else if (value?.includes('수입')) {\n    return OpenColor.grape[2]\n  } else if (value?.includes('용돈')) {\n    return OpenColor.lime[4]\n  } else if (value?.includes('카드')) {\n    return OpenColor.yellow[4]\n  } else if (value?.includes('월급')) {\n    return OpenColor.grape[4]\n  }\n}\n\nconst CommonSelect = styled.select<{\n  height?: string\n  value: string\n}>`\n  width: 100%;\n  min-width: 100%;\n  height: ${({ height }) => (height ? `${height}` : '100%')};\n  padding: 0 2px;\n  border: 0;\n  border-radius: 0;\n  outline: none;\n  background: transparent;\n  color: #222;\n  font: inherit;\n  background: ${({ value }) => background(value)};\n`\n\nconst Background = styled.div<{\n  height?: string\n  value: string\n}>`\n  height: ${({ height }) => (height ? `${height}` : '100%')};\n  background: ${({ value }) => background(value)};\n`\n","export const animationDuration = 300\n","import React, { ChangeEvent, useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Header from '../component/Header/Header'\n\nimport SheetTable from '../component/SheetPage/SheetTable'\nimport SheetSummary from '../component/SheetPage/SheetSummary'\nimport produce, { enableMapSet } from 'immer'\nimport { useGetSheetsQuery } from '../api/reactQuery.ts/useGetSheetQuery'\n\nexport interface SheetDataInterface {\n  sheetId: number\n  name: string\n  order: number\n  table?: string[][]\n  types?: string[]\n}\n\n// 첫 데이터가 펫치됐을때 한번만 setInputWidth() 실행하기 위함\nenableMapSet()\n\nexport default function JoinPage() {\n  const navigate = useNavigate()\n  const { data: sheets } = useGetSheetsQuery({ staleTime: 10 * 1000 })\n  const [checked, setChecked] = useState<Set<number>>(new Set())\n  const [sheetData, setSheetData] = useState<SheetDataInterface>()\n\n  const changeCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\n    const result = produce((draft) => {\n      if (e.target.checked) draft?.add(Number(e.target.value))\n      else draft?.delete(Number(e.target.value))\n      return draft\n    }, checked)\n    setChecked(result)\n  }\n\n  useEffect(() => {\n    if (sheets) {\n      const joinedSheets: SheetDataInterface[] = []\n      const arr = Array.from(checked).sort()\n      arr.forEach((item) => {\n        joinedSheets.push(sheets?.filter((sheet) => sheet.order === item)[0])\n      })\n\n      let joinedTable: string[][] = []\n      joinedSheets.forEach((item) => {\n        if (item.table) {\n          joinedTable = joinedTable\n            .concat(item.table)\n            .concat([['', '', '----- 구분선 -----', '']])\n        }\n      })\n      setSheetData({ table: joinedTable, sheetId: 1, name: 'joined', order: 1 })\n    }\n  }, [checked, sheets])\n\n  return (\n    <>\n      <Header\n        title={'요약보기'}\n        backButton\n        backFunction={() => navigate('/', { replace: true })}\n      />\n      {React.Children.toArray(\n        sheets &&\n          sheets?.map((item) => (\n            <div>\n              <label>\n                <input\n                  type='checkbox'\n                  name='sheet'\n                  value={item.order}\n                  onChange={changeCheckbox}\n                />\n                <span>{item.name}</span>\n              </label>\n            </div>\n          )),\n      )}\n      <SheetSummary sheetData={sheetData} setSheetData={setSheetData} />\n      <SheetTable\n        sheetData={sheetData}\n        setSheetData={setSheetData}\n        readOnly={true}\n      />\n    </>\n  )\n}\n","import { QueryKey, useQuery, UseQueryOptions } from '@tanstack/react-query'\nimport { getSheets } from '../sheet'\nimport { SheetDataInterface } from '../../page/JoinPage'\nimport { queryKeys } from '../queryKeys'\n\nexport const useGetSheetsQuery = (\n  options?: UseQueryOptions<SheetDataInterface[]>,\n) => {\n  return useQuery<SheetDataInterface[]>(\n    [queryKeys.getSheet] as QueryKey,\n    getSheets,\n    options,\n  )\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'AddCircleOutline');\n\nexports.default = _default;"],"names":["queryKeys","axiosInstance","Axios","baseURL","process","withCredentials","getSheets","get","res","data","getSheet","sheetId","postSheets","post","patchSheet","sheetData","patch","patchOrder","orderData","fromId","toId","deleteSheet","delete","SheetSummary","options","income","setSheetData","useRef","sum","types","useQuery","getType","summary","useMemo","summaryObj","map","item","type","amount","current","table","forEach","row","i","parseToNumber","includes","trim","SheetSummaryWrapper","length","SummaryTitle","SummaryDiv","React","SummaryRow","TypeName","Sum","localeBigInt","Percent","Math","abs","setFixed","styled","SheetTable","addRow","removeRow","changeRef","readOnly","BigInt","useState","setTypes","beforeSetWidth","setBeforeSetWidth","useEffect","then","changeInputWidthAll","useCallback","inputs","document","querySelectorAll","input","changeInputWidth","selects","select","handleInputChange","e","j","target","newSheetData","produce","draft","value","TableWrapper","onClick","AddIcon","fontSize","id","col","Background","height","CommonSelect","onChange","k","parseToBigInt","isBigInt","toString","CommonInput","numCheck","RemoveIcon","Colors","animationDuration","AddCircleOutlineIcon","RemoveCircleOutlineIcon","OpenColor","background","JoinPage","navigate","useNavigate","sheets","staleTime","Set","checked","setChecked","changeCheckbox","result","add","Number","joinedSheets","Array","from","sort","push","filter","sheet","order","joinedTable","concat","name","Header","title","backButton","backFunction","replace","enableMapSet","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}