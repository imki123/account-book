{"version":3,"file":"static/js/262.107192bf.chunk.js","mappings":"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","sources":["api/sheet.ts","component/Header/Header.tsx","component/Button/RefreshButton.tsx","constant/constant.ts","component/SheetPage/SheetTable.tsx","component/SheetPage/SheetSummary.tsx","page/SheetPage.tsx","util/util.ts"],"sourcesContent":["import Axios from 'axios'\nimport { SheetDataInterface } from '../page/SheetPage'\n\nconst axiosInstance = Axios.create({\n  baseURL: process.env.REACT_APP_API_URL + 'accountBook/sheet/',\n  withCredentials: true,\n})\n\nexport const getSheets = async () => {\n  let res = await axiosInstance.get<SheetDataInterface[]>('')\n  return res.data\n}\n\nexport const getSheet = async (sheetId: number) => {\n  let res = await axiosInstance.get<SheetDataInterface>(`${sheetId}`)\n  return res.data\n}\n\nexport const postSheets = async () => {\n  let res = await axiosInstance.post<SheetDataInterface[]>('')\n  return res.data\n}\n\nexport const patchSheet = async (\n  sheetId: number,\n  sheetData: SheetDataInterface,\n) => {\n  let res = await axiosInstance.patch<SheetDataInterface>(\n    `${sheetId}`,\n    sheetData,\n  )\n  return res.data\n}\n\n// sheet 순서 변경\nexport const patchOrder = async (orderData: sheetOrderInterface) => {\n  let res = await axiosInstance.patch(\n    `${orderData.fromId}/${orderData.toId}`,\n    orderData,\n  )\n  return res.data\n}\n\nexport const deleteSheet = async (sheetId: number) => {\n  let res = await axiosInstance.delete(`${sheetId}`)\n  return res.data\n}\n\nexport interface sheetOrderInterface {\n  fromId: number\n  toId: number\n}\n","import styled from '@emotion/styled'\nimport { useNavigate } from 'react-router-dom'\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew'\nimport { Colors } from '../../util/Colors'\nimport { ReactNode } from 'react'\n\nexport default function Header({\n  title,\n  backButton,\n  backFunction,\n}: {\n  title?: ReactNode\n  backButton?: boolean\n  backFunction?: () => void\n}) {\n  const navigate = useNavigate()\n  return (\n    <HeaderWrapper>\n      {backButton && (\n        <BackIcon\n          fontSize='inherit'\n          onClick={() => (backFunction ? backFunction() : navigate(-1))}\n        />\n      )}\n      {title && title !== 'undefined' && <TitleSpan>{title}</TitleSpan>}\n    </HeaderWrapper>\n  )\n}\n\nconst HeaderWrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100%;\n  height: 38.5px;\n  max-width: 500px;\n\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n  padding: 10px 20px 10px;\n  border-bottom: 1px solid ${Colors.greenLine};\n  background: white;\n  @media (min-width: 500px) {\n    border: 1px solid ${Colors.greenLine};\n    border-top: 0;\n  }\n`\n\nconst BackIcon = styled(ArrowBackIosNewIcon)`\n  &::active {\n    background: #eee;\n  }\n`\n\nconst TitleSpan = styled.span`\n  font-weight: 700;\n`\n","import styled from '@emotion/styled'\nimport RefreshIcon from '@mui/icons-material/Refresh'\n\nexport default function RefreshButton({\n  onClick,\n  refreshing,\n}: {\n  onClick: () => void\n  refreshing: boolean\n}) {\n  return (\n    <RefreshButtonWrapper onClick={onClick} disabled={refreshing}>\n      <RefreshIcon />\n    </RefreshButtonWrapper>\n  )\n}\n\nconst RefreshButtonWrapper = styled.button<{ disabled: boolean }>`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  @media (min-width: 500px) {\n    right: calc(50% - 230px);\n  }\n\n  padding: 5px;\n  width: 40px;\n  height: 40px;\n\n  overflow: hidden;\n  background: white;\n  border: 2px solid #eee;\n  border-radius: 100%;\n\n  ${({ disabled }) => disabled && `animation: 500ms rotation infinite linear;`}\n  @keyframes rotation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  svg {\n    color: #aaa;\n    width: 100%;\n    height: 100%;\n  }\n`\n","export const animationDuration = 300\n","import React, { ChangeEvent } from 'react'\nimport { Colors } from '../../util/Colors'\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'\nimport RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline'\nimport produce from 'immer'\nimport { SheetDataInterface } from '../../page/SheetPage'\nimport styled from '@emotion/styled'\nimport { animationDuration } from '../../constant/constant'\nimport {\n  changeInputWidth,\n  isBigInt,\n  localeBigInt,\n  parseToBigInt,\n} from '../../util/util'\n\ninterface SheetTableInterface {\n  sheetData?: SheetDataInterface\n  setSheetData: React.Dispatch<\n    React.SetStateAction<SheetDataInterface | undefined>\n  >\n  addRow: (row: number) => void\n  removeRow: (row: number) => void\n}\n\nexport default function SheetTable({\n  sheetData,\n  setSheetData,\n  addRow,\n  removeRow,\n}: SheetTableInterface) {\n  let sum = BigInt(0)\n\n  // 이벤트와 인덱스를 받아서 sheetData에 저장\n  const handleInputChange = (\n    e: ChangeEvent<HTMLInputElement>,\n    i: number,\n    j: number,\n  ) => {\n    if (e.target) {\n      // input size 변경\n      changeInputWidth(e.target)\n\n      // sheetData 업데이트\n      const newSheetData = produce((draft) => {\n        if (draft && draft.table && draft.table[i]) {\n          draft.table[i][j] = e.target.value\n          return draft\n        }\n      }, sheetData)\n      setSheetData(newSheetData)\n    }\n  }\n\n  return (\n    <TableWrapper>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>번호</th>\n            <th>유형</th>\n            <th>항목</th>\n            <th>가격</th>\n            <th>합계</th>\n            <th onClick={() => addRow(0)}>\n              <AddIcon fontSize='small' />\n            </th>\n          </tr>\n          {React.Children.toArray(\n            sheetData?.table?.map((row, i) => (\n              <tr id={`row_${i + 1}`}>\n                <td\n                  onClick={() => {\n                    removeRow(i + 1)\n                  }}\n                >\n                  <RemoveIcon fontSize='small' />\n                </td>\n                <td>{i + 1}</td>\n                {React.Children.toArray(\n                  row.map((col, j) => {\n                    // 합계에 가격 더하기\n                    if (j === 2) {\n                      sum += parseToBigInt(col)\n                    }\n                    return (\n                      <td>\n                        <CommonInput\n                          numCheck={j === 2}\n                          value={\n                            j === 2 && isBigInt(col) && col !== ''\n                              ? localeBigInt(col)\n                              : col.toString()\n                          }\n                          height='28px'\n                          onChange={(e) => handleInputChange(e, i, j)}\n                        />\n                      </td>\n                    )\n                  }),\n                )}\n                <td>{localeBigInt(sum)}</td>\n                <td onClick={() => addRow(i + 1)}>\n                  <AddIcon fontSize='small' />\n                </td>\n              </tr>\n            )),\n          )}\n        </tbody>\n      </table>\n    </TableWrapper>\n  )\n}\n\nconst TableWrapper = styled.div`\n  min-width: 100%;\n  max-width: 200%;\n  overflow: auto;\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    border: 1px solid ${Colors.greenLine};\n  }\n  th {\n    background: ${Colors.greenLine};\n  }\n  th,\n  td {\n    border: 1px solid ${Colors.greenLine};\n    white-space: pre;\n    text-align: left;\n    padding: 2px;\n    min-width: 10px;\n  }\n  .blink {\n    @keyframes blink {\n      0% {\n        background: ${Colors.greenLine};\n      }\n      100% {\n        background: white;\n      }\n    }\n    animation: blink ${animationDuration}ms;\n  }\n  .blinkRed {\n    @keyframes blinkRed {\n      0% {\n        background: red;\n      }\n      100% {\n        background: white;\n      }\n    }\n    animation: blinkRed ${animationDuration}ms;\n  }\n  th:nth-of-type(3),\n  th:nth-of-type(4),\n  th:nth-of-type(5),\n  th:nth-of-type(6) {\n    min-width: 60px;\n  }\n  td:nth-of-type(5) input,\n  td:nth-of-type(6) {\n    text-align: right;\n  }\n  td:nth-of-type(3),\n  td:nth-of-type(4),\n  td:nth-of-type(5) {\n    padding: 0;\n  }\n`\nconst AddIcon = styled(AddCircleOutlineIcon)`\n  color: #7c7;\n`\nconst RemoveIcon = styled(RemoveCircleOutlineIcon)`\n  color: red;\n`\nexport const CommonInput = styled.input<{\n  height?: string\n  value?: string | number | BigInt\n  numCheck?: boolean\n}>`\n  width: 100%;\n  min-width: 100%;\n  height: ${({ height }) => (height ? `${height}` : '100%')};\n  border: 0;\n  border-radius: 0;\n  outline: none;\n  background: none;\n  font: inherit;\n  &:focus,\n  &:hover,\n  &:active {\n    background: ${Colors.greenLine};\n  }\n  ${({ numCheck, value }) => {\n    return numCheck && !isBigInt(value) ? 'background: #fcc;' : ''\n  }}\n`\n","import styled from '@emotion/styled'\nimport React, { useEffect, useMemo } from 'react'\nimport { SheetDataInterface } from '../../page/SheetPage'\nimport { localeBigInt, removeComma } from '../../util/util'\n\nconst stringToBig = (str: string) => BigInt(removeComma(str))\n\nexport default function SheetSummary({\n  sheetData,\n  setSheetData,\n}: {\n  sheetData?: SheetDataInterface\n  setSheetData: React.Dispatch<\n    React.SetStateAction<SheetDataInterface | undefined>\n  >\n}) {\n  const { summary, summaryKeys } = useMemo(() => {\n    if (!sheetData?.table) return { summary: {}, summaryKeys: [] }\n    const obj = {}\n    sheetData?.table?.forEach((row, i) => {\n      //row[0]가 공백이 아니면 obj에 값 합산해서 저장\n      if (row[0].trim() !== '') {\n        if (obj[row[0]] === undefined) {\n          obj[row[0]] = { sum: '0', order: '' }\n        }\n        try {\n          const before = stringToBig(obj[row[0]].sum || '0')\n          const after = stringToBig(row[2] || '0')\n          obj[row[0]].sum = String(before + after)\n        } catch (e) {}\n      }\n    })\n    console.log(obj)\n    const keys = Object.keys(obj).sort()\n    keys.forEach((item, i) => (obj[item].order = i))\n    return { summary: obj, summaryKeys: keys }\n  }, [sheetData?.table])\n\n  return (\n    <SheetSummaryWrapper>\n      <SummaryTitle>요약</SummaryTitle>\n      <SummaryDiv>\n        {React.Children.toArray(\n          summaryKeys.map((item) => (\n            <div>\n              <TypeName>{item} </TypeName> :{' '}\n              <Sum> {localeBigInt(summary[item]?.sum)}</Sum>\n            </div>\n          )),\n        )}\n      </SummaryDiv>\n    </SheetSummaryWrapper>\n  )\n}\n\nconst SheetSummaryWrapper = styled.div`\n  padding: 20px 0;\n`\nconst SummaryTitle = styled.div`\n  font-weight: bold;\n`\nconst SummaryDiv = styled.div`\n  padding-top: 10px;\n`\nconst TypeName = styled.div`\n  display: inline-block;\n  min-width: 50px;\n  padding-right: 10px;\n`\nconst Sum = styled.div`\n  display: inline-block;\n  padding-left: 10px;\n`\n","import styled from '@emotion/styled'\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport Header from '../component/Header/Header'\nimport produce from 'immer'\n\nimport { getSheet, patchSheet } from '../api/sheet'\nimport RefreshButton from '../component/Button/RefreshButton'\nimport SaveIcon from '@mui/icons-material/Save'\nimport SheetTable from '../component/SheetPage/SheetTable'\nimport { animationDuration } from '../constant/constant'\nimport { Colors } from '../util/Colors'\nimport { addSnackBar, changeInputWidth } from '../util/util'\nimport LoadingDim from '../component/LoadingDim/LoadingDim'\nimport SheetSummary from '../component/SheetPage/SheetSummary'\n\nexport interface SheetDataInterface {\n  sheetId: number\n  name: string\n  order: number\n  table?: string[][]\n  types?: string[]\n}\n\n// 첫 데이터가 펫치됐을때 한번만 setInputWidth() 실행하기 위함\n\nexport default function SheetPage() {\n  const params = useParams()\n  const navigate = useNavigate()\n  const [sheetData, setSheetData] = useState<SheetDataInterface>()\n  const [loading, setLoading] = useState(false)\n  const [addedRow, setAddedRow] = useState<number>()\n  const [removedRow, setRemovedRow] = useState<number>()\n  const [beforeSetWidth, setBeforeSetWidth] = useState(true)\n\n  const getSheetAndSet = useCallback(() => {\n    if (params.sheetId) {\n      setLoading(true)\n      getSheet(Number(params.sheetId)).then((res) => {\n        setLoading(false)\n        if (res) setSheetData(res)\n      })\n    }\n  }, [params.sheetId])\n\n  const handleChangeHeader = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      // sheetData 업데이트\n      if (sheetData) {\n        const newSheetData = produce((draft) => {\n          if (draft) {\n            // size 변경\n            changeInputWidth(e.target)\n\n            draft.name = e.target.value\n            return draft\n          }\n        }, sheetData)\n        setSheetData(newSheetData)\n      }\n    },\n    [sheetData],\n  )\n  // 처음 한번만 전체 input width 설정하기\n  const changeInputWidthAll = useCallback(() => {\n    const inputs = document.querySelectorAll<HTMLInputElement>(\n      'input:not(.fakeInput)',\n    )\n    if (inputs) {\n      inputs.forEach((input) => {\n        changeInputWidth(input)\n      })\n      setBeforeSetWidth(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    getSheetAndSet()\n  }, [getSheetAndSet])\n\n  // sheetData 바뀌고 beforeSetWidth가 true이면 input width 바꿔주기\n  useEffect(() => {\n    if (beforeSetWidth && sheetData) {\n      changeInputWidthAll()\n    }\n  }, [beforeSetWidth, changeInputWidthAll, sheetData])\n\n  // addRow 액션\n  useEffect(() => {\n    if (addedRow !== undefined) {\n      const tr = document.querySelector(`#row_${addedRow + 1}`)\n      if (tr) {\n        tr.classList.add('blink')\n        setAddedRow(undefined)\n        setTimeout(() => {\n          tr.classList.remove('blink')\n        }, animationDuration)\n      }\n    }\n  }, [addedRow])\n\n  // removeRow 액션\n  useEffect(() => {\n    if (sheetData && removedRow !== undefined) {\n      const tr = document.querySelector(`#row_${removedRow}`)\n      if (tr) {\n        tr.classList.add('blinkRed')\n        setTimeout(() => {\n          tr.classList.remove('blinkRed')\n          const nextState = produce(sheetData, (draft) => {\n            draft?.table?.splice(removedRow - 1, 1)\n          })\n          setSheetData(nextState)\n          setRemovedRow(undefined)\n        }, animationDuration)\n      }\n    }\n  }, [removedRow, sheetData])\n\n  const addRow = useCallback(\n    (row: number) => {\n      const nextState = produce(sheetData, (draft) => {\n        draft?.table?.splice(row, 0, ['', '', ''])\n      })\n      setSheetData(nextState)\n      setAddedRow(row)\n    },\n    [sheetData],\n  )\n\n  const removeRow = useCallback((row: number) => {\n    setRemovedRow(row)\n  }, [])\n\n  return (\n    <>\n      <Header\n        title={\n          sheetData?.name ? (\n            <HeaderInput\n              value={sheetData?.name}\n              onChange={handleChangeHeader}\n            />\n          ) : null\n        }\n        backButton\n        backFunction={() => navigate('/')}\n      />\n      <SheetTable\n        sheetData={sheetData}\n        setSheetData={setSheetData}\n        addRow={addRow}\n        removeRow={removeRow}\n      />\n      <SheetSummary sheetData={sheetData} setSheetData={setSheetData} />\n      <RefreshButton\n        refreshing={loading}\n        onClick={() => {\n          getSheetAndSet()\n          setBeforeSetWidth(true)\n          addSnackBar('새로고침 완료')\n        }}\n      />\n      <SaveButton\n        disabled={loading}\n        onClick={() => {\n          if (params.sheetId && sheetData) {\n            setLoading(true)\n            patchSheet(Number(params.sheetId), sheetData).then((res) => {\n              setLoading(false)\n              addSnackBar('저장 완료')\n            })\n          }\n        }}\n      >\n        <SaveIcon />\n      </SaveButton>\n      <LoadingDim loading={loading} />\n    </>\n  )\n}\n\nconst HeaderInput = styled.input`\n  width: 100%;\n  min-width: 100%;\n  height: 24px;\n  border: 0;\n  outline: none;\n  background: none;\n  font: inherit;\n  &:focus,\n  &:hover,\n  &:active {\n    border-bottom: 1px solid ${Colors.greenLine};\n  }\n`\nconst SaveButton = styled.button<{ disabled: boolean }>`\n  position: fixed;\n  z-index: 1;\n  top: 2px;\n  right: 20px;\n  @media (min-width: 500px) {\n    right: calc(50% - 230px);\n  }\n\n  padding: 5px;\n  width: 40px;\n  height: 40px;\n\n  overflow: hidden;\n  background: blue;\n  border: 2px solid #eee;\n  border-radius: 100%;\n  opacity: 0.7;\n  svg {\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  ${({ disabled }) => disabled && `background: #555;`}\n`\n","export const parseToNumber = (num: string | number) => {\n  const number = removeComma(num)\n  if (Number.isNaN(Number(number))) {\n    return 0\n  } else {\n    return Number(number)\n  }\n}\n\nexport const removeComma = (num?: string | number | BigInt) => {\n  if (!num) return ''\n  return String(num).replace(/,/g, '')\n}\n\nexport const localeNumber = (num: string | number) => {\n  return Number(removeComma(num)).toLocaleString()\n}\n\nexport const isNumber = (num: string | number) => {\n  return !isNaN(Number(removeComma(num)))\n}\n\n// BigInt\nexport const parseToBigInt = (num: string | BigInt) => {\n  const number = removeComma(num)\n  if (isBigInt(number)) {\n    return BigInt(number)\n  } else {\n    return BigInt(0)\n  }\n}\n\nexport const localeBigInt = (num: string | BigInt) => {\n  return BigInt(removeComma(num)).toLocaleString()\n}\n\nexport const isBigInt = (num?: string | BigInt | number) => {\n  try {\n    if (typeof num === 'number') return false\n    BigInt(removeComma(num))\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n// fake input 사용해서 input size 변경\nexport const changeInputWidth = (target: HTMLInputElement) => {\n  if (target) {\n    const fakeInput = document.querySelector<HTMLInputElement>('.fakeInput')\n    if (fakeInput) {\n      fakeInput.value = target.value\n      fakeInput.style.fontSize = getComputedStyle(target).fontSize\n      fakeInput.style.fontWeight = getComputedStyle(target).fontWeight\n      const width = fakeInput.scrollWidth + 10\n      target.style.width = width + 'px'\n      fakeInput.value = ''\n    }\n  }\n}\n\nexport const addSnackBar = (\n  message: string,\n  duration = 2000,\n  animationTime = 500,\n) => {\n  const snackBar = document.createElement('div')\n  const defaultStyle = `\n    position: fixed;\n    bottom: -40px;\n    left: 50%;\n    transform: translate(-50%);\n    opacity: 0;\n    background: #777;\n    color: white;\n    padding: 5px 10px;\n    border-radius: 8px;\n    font-size: 14px;\n    transition: bottom ${animationTime}ms, opacity ${animationTime}ms;\n  `\n  snackBar.style.cssText = defaultStyle\n  snackBar.innerText = message\n  document.body.appendChild(snackBar)\n  setTimeout(() => {\n    snackBar.style.cssText =\n      defaultStyle +\n      `\n    bottom: 20px;\n    opacity: 0.9;\n    `\n  }, 10)\n  setTimeout(() => {\n    snackBar.style.cssText = defaultStyle\n  }, duration)\n  setTimeout(() => {\n    if (snackBar) snackBar.remove()\n  }, duration + animationTime)\n}\n"],"names":["axiosInstance","Axios","baseURL","process","withCredentials","getSheets","get","res","data","getSheet","sheetId","postSheets","post","patchSheet","sheetData","patch","patchOrder","orderData","fromId","toId","deleteSheet","delete","Header","title","backButton","backFunction","navigate","useNavigate","HeaderWrapper","BackIcon","fontSize","onClick","TitleSpan","styled","Colors","ArrowBackIosNewIcon","RefreshButton","refreshing","RefreshButtonWrapper","disabled","Refresh","animationDuration","SheetTable","setSheetData","addRow","removeRow","sum","BigInt","TableWrapper","AddIcon","React","table","map","row","i","id","RemoveIcon","col","j","parseToBigInt","CommonInput","numCheck","value","isBigInt","localeBigInt","toString","height","onChange","e","target","changeInputWidth","newSheetData","produce","draft","handleInputChange","AddCircleOutlineIcon","RemoveCircleOutlineIcon","stringToBig","str","removeComma","SheetSummary","useMemo","summary","summaryKeys","obj","forEach","trim","undefined","order","before","after","String","console","log","keys","Object","sort","item","SheetSummaryWrapper","SummaryTitle","SummaryDiv","TypeName","Sum","SheetPage","params","useParams","useState","loading","setLoading","addedRow","setAddedRow","removedRow","setRemovedRow","beforeSetWidth","setBeforeSetWidth","getSheetAndSet","useCallback","Number","then","handleChangeHeader","name","changeInputWidthAll","inputs","document","querySelectorAll","input","useEffect","tr","querySelector","classList","add","setTimeout","remove","nextState","splice","HeaderInput","addSnackBar","SaveButton","Save","LoadingDim","num","replace","number","toLocaleString","fakeInput","style","getComputedStyle","fontWeight","width","scrollWidth","message","duration","animationTime","snackBar","createElement","defaultStyle","cssText","innerText","body","appendChild"],"sourceRoot":""}